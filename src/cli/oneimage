#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2012, OpenNebula Project Leads (OpenNebula.org)             #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/cli"

require 'command_parser'
require 'one_helper/oneimage_helper'

cmd=CommandParser::CmdParser.new(ARGV) do
    usage "`oneimage` <command> [<args>] [<options>]"
    version OpenNebulaHelper::ONE_VERSION

    helper = OneImageHelper.new

    ########################################################################
    # Global Options
    ########################################################################
    set :option, CommandParser::OPTIONS

    list_options = CLIHelper::OPTIONS
    list_options << OpenNebulaHelper::XML
    list_options << OpenNebulaHelper::NUMERIC

    ########################################################################
    # Formatters for arguments
    ########################################################################
    set :format, :groupid, OpenNebulaHelper.rname_to_id_desc("GROUP") do |arg|
        OpenNebulaHelper.rname_to_id(arg, "GROUP")
    end

    set :format, :userid, OpenNebulaHelper.rname_to_id_desc("USER") do |arg|
        OpenNebulaHelper.rname_to_id(arg, "USER")
    end

    set :format, :imageid, OneImageHelper.to_id_desc do |arg|
        helper.to_id(arg)
    end

    set :format, :imageid_list, OneImageHelper.list_to_id_desc do |arg|
        helper.list_to_id(arg)
    end

    set :format, :filterflag, OneImageHelper.filterflag_to_i_desc do |arg|
        helper.filterflag_to_i(arg)
    end

    ########################################################################
    # Commands
    ########################################################################

    create_desc = <<-EOT.unindent
        Creates a new Image from the given template file
    EOT

    command :create, create_desc, :file do
        helper.create_resource(options) do |image|
            template=File.read(args[0])
            image.allocate(template)
        end
    end

    delete_desc = <<-EOT.unindent
        Deletes the given Image
    EOT

    command :delete, delete_desc, [:range, :imageid_list] do
        helper.perform_actions(args[0],options,"deleted") do |image|
            image.delete
        end
    end

    publish_desc = <<-EOT.unindent
        DEPRECATED, use chmod instead. Publishes the given Image. A public Image
        can be seen and used by other users in the Image's group.
    EOT

    command :publish, publish_desc, [:range,:imageid_list] do
        helper.perform_actions(args[0],options,"published") do |image|
            image.publish
        end
    end

    unpublish_desc = <<-EOT.unindent
        DEPRECATED, use chmod instead. Unpublishes the given Image. A private 
        Image can't be used by any other user.
    EOT

    command :unpublish, unpublish_desc, [:range,:imageid_list] do
        helper.perform_actions(args[0],options,"unpublished") do |image|
            image.unpublish
        end
    end

    persistent_desc = <<-EOT.unindent
        Makes the given Image persistent. A persistent Image saves the changes
        made to the contents after the VM instance is shutdown (or in real time
        if a shared FS is used). Persistent Images can be used by only
        one VM instance at a time.
    EOT

    command :persistent, persistent_desc, [:range,:imageid_list] do
        helper.perform_actions(args[0],options,"made persistent") do |image|
            image.persistent
        end
    end

    nonpersistent_desc = <<-EOT.unindent
        Makes the given Image non persistent. See 'oneimage persistent'
    EOT

    command :nonpersistent, nonpersistent_desc, [:range,:imageid_list] do
        helper.perform_actions(args[0],options,"made non persistent") do |image|
            image.nonpersistent
        end
    end

    enable_desc = <<-EOT.unindent
        Enables the given Image
    EOT

    update_desc = <<-EOT.unindent
        Launches the system editor to modify and update the template contents
    EOT

    command :update, update_desc, :imageid do
        helper.perform_action(args[0],options,"modified") do |image|
            str = OpenNebulaHelper.update_template(args[0], image)
            image.update(str)
        end
    end

    command :enable, enable_desc, [:range,:imageid_list] do
        helper.perform_actions(args[0],options,"enabled") do |image|
            image.enable
        end
    end

    chtype_desc = <<-EOT.unindent
        Changes the Image's type
    EOT

    command :chtype, chtype_desc,[:range, :imageid_list], :type do
        helper.perform_actions(args[0],options,"Type changed") do |image|
            image.chtype(args[1])
        end
    end

    disable_desc = <<-EOT.unindent
        Disables the given Image
    EOT

    command :disable, disable_desc, [:range,:imageid_list] do
        helper.perform_actions(args[0],options,"disabled") do |image|
            image.disable
        end
    end

    chgrp_desc = <<-EOT.unindent
        Changes the Image group
    EOT

    command :chgrp, chgrp_desc,[:range, :imageid_list], :groupid do
        helper.perform_actions(args[0],options,"Group changed") do |image|
            image.chown(-1, args[1].to_i)
        end
    end

    chown_desc = <<-EOT.unindent
        Changes the Image owner and group
    EOT

    command :chown, chown_desc, [:range, :imageid_list], :userid,
            [:groupid,nil] do
        gid = args[2].nil? ? -1 : args[2].to_i
        helper.perform_actions(args[0],options,
                "Owner/Group changed") do |image|
            image.chown(args[1].to_i, gid)
        end
    end

    chmod_desc = <<-EOT.unindent
        Changes the Image permissions
    EOT

    command :chmod, chmod_desc, [:range, :imageid_list], :octet do
        helper.perform_actions(args[0],options,
                "Permissions changed") do |image|
            image.chmod_octet(args[1])
        end
    end

    list_desc = <<-EOT.unindent
        Lists Images in the pool
    EOT

    command :list, list_desc, [:filterflag, nil], :options=>list_options do
        helper.list_pool(options, false, args[0])
    end

    show_desc = <<-EOT.unindent
        Shows information for the given Image
    EOT

    command :show, show_desc, :imageid, :options=>OpenNebulaHelper::XML do
        helper.show_resource(args[0],options)
    end

    top_desc = <<-EOT.unindent
        Lists Images continuously
    EOT

    command :top, top_desc, [:filterflag, nil], :options=>list_options do
        helper.list_pool(options, true, args[0])
    end
end
